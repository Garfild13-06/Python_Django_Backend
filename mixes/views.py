from django.contrib.auth import authenticate
from django.db.models import Q
from django.shortcuts import get_object_or_404
from rest_framework import viewsets, status, filters
from rest_framework.decorators import permission_classes
from rest_framework.generics import CreateAPIView
from rest_framework.pagination import LimitOffsetPagination
from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly, AllowAny
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.authentication import JWTAuthentication
from rest_framework_simplejwt.tokens import RefreshToken

from users.views import CustomLimitOffsetPagination
from mixes.models import Mixes, MixLikes, MixFavorites
from mixes.serializers import MixesSerializer


# Create your views here.
# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–∫—Å–∞
class MixCreateView(CreateAPIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = Mixes.objects.all()
    serializer_class = MixesSerializer

# MixesListView
class MixesListView(APIView):
    authentication_classes = [JWTAuthentication]
    permission_classes = [AllowAny]

    def get(self, request, *args, **kwargs):
        queryset = Mixes.objects.all()
        paginator = CustomLimitOffsetPagination()
        paginated_queryset = paginator.paginate_queryset(queryset, request)
        if isinstance(paginated_queryset, Response):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç
            return paginated_queryset
        serializer = MixesSerializer(paginated_queryset, many=True, context={'request': request})
        return paginator.get_paginated_response(serializer.data)

    def post(self, request, *args, **kwargs):
        serializer = MixesSerializer(data=request.data, context={'request': request})
        if serializer.is_valid():
            serializer.save()
            return Response({
                "status": "ok",
                "code": 201,
                "message": "–ú–∏–∫—Å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                "data": serializer.data
            }, status=201)
        return Response({
            "status": "bad",
            "code": 400,
            "message": "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–∫—Å–∞",
            "data": serializer.errors
        }, status=400)


class MixesViewSet(viewsets.ModelViewSet):
    queryset = Mixes.objects.all()
    serializer_class = MixesSerializer

    def get_serializer_context(self):
        # –ó–¥–µ—Å—å –º—ã —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞—ë–º request –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        return {'request': self.request}

    def list(self, request, *args, **kwargs):
        # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –º–∏–∫—Å–æ–≤ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        queryset = self.filter_queryset(self.get_queryset())
        page = self.paginate_queryset(queryset)

        if page is not None:
            serializer = self.get_serializer(page, many=True)
            paginated_response = self.get_paginated_response(serializer.data)
            return Response({
                "status": "ok",
                "code": paginated_response.status_code,
                "message": "–°–ø–∏—Å–æ–∫ –º–∏–∫—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
                "data": paginated_response.data,
            }, status=paginated_response.status_code)

        serializer = self.get_serializer(queryset, many=True)
        return Response({
            "status": "ok",
            "code": status.HTTP_200_OK,
            "message": "–°–ø–∏—Å–æ–∫ –º–∏–∫—Å–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            "data": serializer.data
        }, status=status.HTTP_200_OK)


class MixDetailView(APIView):
    def get(self, request, mix_id, *args, **kwargs):
        mix = get_object_or_404(Mixes, id=mix_id)
        serializer = MixesSerializer(mix, context={'request': request})
        return Response({
            "status": "ok",
            "code": status.HTTP_200_OK,
            "message": "–î–µ—Ç–∞–ª–∏ –º–∏–∫—Å–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
            "data": serializer.data
        }, status=status.HTTP_200_OK)


class MixLikeAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, mix_id):
        mix = get_object_or_404(Mixes, id=mix_id)
        user = request.user
        like, created = MixLikes.objects.get_or_create(user=user, mix=mix)

        if not created:
            like.delete()
            return Response({
                "status": "ok",
                "code": status.HTTP_204_NO_CONTENT,
                "message": "–õ–∞–π–∫ —É–¥–∞–ª—ë–Ω",
                "data": None
            }, status=status.HTTP_204_NO_CONTENT)
        return Response({
            "status": "ok",
            "code": status.HTTP_201_CREATED,
            "message": "–õ–∞–π–∫ –¥–æ–±–∞–≤–ª–µ–Ω",
            "data": None
        }, status=status.HTTP_201_CREATED)


class MixFavoriteAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, mix_id):
        mix = get_object_or_404(Mixes, id=mix_id)
        user = request.user
        favorite, created = MixFavorites.objects.get_or_create(user=user, mix=mix)

        if not created:
            favorite.delete()
            return Response({
                "status": "ok",
                "code": status.HTTP_204_NO_CONTENT,
                "message": "–£–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ",
                "data": None
            }, status=status.HTTP_204_NO_CONTENT)
        return Response({
            "status": "ok",
            "code": status.HTTP_201_CREATED,
            "message": "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
            "data": None
        }, status=status.HTTP_201_CREATED)
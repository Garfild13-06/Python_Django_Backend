from django.contrib.auth import authenticate
from django.db.models import Q
from django.shortcuts import get_object_or_404
from drf_yasg.utils import swagger_auto_schema
from rest_framework import viewsets, status, filters
from rest_framework.generics import CreateAPIView
from rest_framework.pagination import PageNumberPagination
from rest_framework.permissions import IsAuthenticated, IsAuthenticatedOrReadOnly, AllowAny
from rest_framework.response import Response
from rest_framework.views import APIView
from rest_framework_simplejwt.authentication import JWTAuthentication
from main.models import Manufacturers
from manufacturers.serializers import ManufacturersSerializer


class ManufacturersListAPIView(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—à.
    """
    permission_classes = [AllowAny]  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
    authentication_classes = []  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    @swagger_auto_schema(
        tags=['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π"
    )
    def post(self, request, *args, **kwargs):
        queryset = Manufacturers.objects.all()
        paginator = PageNumberPagination()
        page = paginator.paginate_queryset(queryset, request)
        if page is not None:
            serializer = ManufacturersSerializer(page, many=True)
            return paginator.get_paginated_response({
                "status": "ok",
                "code": status.HTTP_200_OK,
                "message": "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
                "data": serializer.data
            })
        serializer = ManufacturersSerializer(queryset, many=True)
        return Response({
            "status": "ok",
            "code": status.HTTP_200_OK,
            "message": "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω",
            "data": serializer.data
        }, status=status.HTTP_200_OK)


class ManufacturersDetailAPIView(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
    """
    permission_classes = [AllowAny]  # –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø –≤—Å–µ–º
    authentication_classes = []  # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    @swagger_auto_schema(
        tags=['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        operation_summary="–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ id"
    )
    def post(self, request, pk, *args, **kwargs):
        instance = get_object_or_404(Manufacturers, pk=pk)
        serializer = ManufacturersSerializer(instance)
        return Response({
            "status": "ok",
            "code": status.HTTP_200_OK,
            "message": "–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã",
            "data": serializer.data
        }, status=status.HTTP_200_OK)

# üîπ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
class ManufacturersCreateAPIView(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ POST-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.
    """
    permission_classes = [IsAuthenticated]  # –¢—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    authentication_classes = [JWTAuthentication]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

    @swagger_auto_schema(
        tags=['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        operation_summary="–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
        operation_description="–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è. –¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ —Ç–æ–∫–µ–Ω—É.",
    )
    def post(self, request, *args, **kwargs):
        serializer = ManufacturersSerializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "status": "ok",
                "code": status.HTTP_201_CREATED,
                "message": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
                "data": serializer.data
            }, status=status.HTTP_201_CREATED)
        return Response({
            "status": "bad",
            "code": status.HTTP_400_BAD_REQUEST,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
            "data": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

class ManufacturersUpdateAPIView(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ PUT-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—à–∏.
    """
    permission_classes = [IsAuthenticated]  # –¢—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    authentication_classes = [JWTAuthentication]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

    @swagger_auto_schema(
        tags=['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        operation_summary="–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ id"
    )
    def put(self, request, pk, *args, **kwargs):
        instance = get_object_or_404(Manufacturers, pk=pk)
        serializer = ManufacturersSerializer(instance, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "status": "ok",
                "code": status.HTTP_200_OK,
                "message": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
                "data": serializer.data
            }, status=status.HTTP_200_OK)
        return Response({
            "status": "bad",
            "code": status.HTTP_400_BAD_REQUEST,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
            "data": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

class ManufacturersPartialUpdateAPIView(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ PATCH-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—à–∏.
    """
    permission_classes = [IsAuthenticated]  # –¢—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    authentication_classes = [JWTAuthentication]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

    @swagger_auto_schema(
        tags=['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        operation_summary="–ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ id"
    )
    def patch(self, request, pk, *args, **kwargs):
        instance = get_object_or_404(Manufacturers, pk=pk)
        serializer = ManufacturersSerializer(instance, data=request.data, partial=True)
        if serializer.is_valid():
            serializer.save()
            return Response({
                "status": "ok",
                "code": status.HTTP_200_OK,
                "message": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω",
                "data": serializer.data
            }, status=status.HTTP_200_OK)
        return Response({
            "status": "bad",
            "code": status.HTTP_400_BAD_REQUEST,
            "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è",
            "data": serializer.errors
        }, status=status.HTTP_400_BAD_REQUEST)

class ManufacturersDestroyAPIView(APIView):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ DELETE-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è.
    """
    permission_classes = [IsAuthenticated]  # –¢—Ä–µ–±—É–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
    authentication_classes = [JWTAuthentication]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º JWT-–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

    @swagger_auto_schema(
        tags=['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏'],
        operation_summary="–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ id"
    )
    def delete(self, request, pk, *args, **kwargs):
        instance = get_object_or_404(Manufacturers, pk=pk)
        instance.delete()
        return Response({
            "status": "ok",
            "code": status.HTTP_204_NO_CONTENT,
            "message": "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞",
            "data": None
        }, status=status.HTTP_204_NO_CONTENT)